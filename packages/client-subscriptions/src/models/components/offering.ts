/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { OfferingMeta, OfferingMeta$ } from "./offeringmeta";
import {
    OfferingResponseAttributes,
    OfferingResponseAttributes$,
} from "./offeringresponseattributes";
import { Relationship, Relationship$ } from "./relationship";
import { SubscriptionOfferingType, SubscriptionOfferingType$ } from "./subscriptionofferingtype";
import { z } from "zod";

export type Offering = {
    /**
     * The unique identifier.
     */
    id?: string | undefined;
    type?: SubscriptionOfferingType | undefined;
    attributes: OfferingResponseAttributes;
    /**
     * Relationships are established between different subscription entities. For example, a product and a plan are related to an offering, as both are attached to it.
     */
    relationships?: Record<string, Relationship> | undefined;
    meta: OfferingMeta;
};

/** @internal */
export namespace Offering$ {
    export type Inbound = {
        id?: string | undefined;
        type?: SubscriptionOfferingType | undefined;
        attributes: OfferingResponseAttributes$.Inbound;
        relationships?: Record<string, Relationship$.Inbound> | undefined;
        meta: OfferingMeta$.Inbound;
    };

    export const inboundSchema: z.ZodType<Offering, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: SubscriptionOfferingType$.default(SubscriptionOfferingType.SubscriptionOffering),
            attributes: OfferingResponseAttributes$.inboundSchema,
            relationships: z.record(Relationship$.inboundSchema).optional(),
            meta: OfferingMeta$.inboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                attributes: v.attributes,
                ...(v.relationships === undefined ? null : { relationships: v.relationships }),
                meta: v.meta,
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type: SubscriptionOfferingType;
        attributes: OfferingResponseAttributes$.Outbound;
        relationships?: Record<string, Relationship$.Outbound> | undefined;
        meta: OfferingMeta$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Offering> = z
        .object({
            id: z.string().optional(),
            type: SubscriptionOfferingType$.default(SubscriptionOfferingType.SubscriptionOffering),
            attributes: OfferingResponseAttributes$.outboundSchema,
            relationships: z.record(Relationship$.outboundSchema).optional(),
            meta: OfferingMeta$.outboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                attributes: v.attributes,
                ...(v.relationships === undefined ? null : { relationships: v.relationships }),
                meta: v.meta,
            };
        });
}
