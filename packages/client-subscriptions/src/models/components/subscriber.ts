/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SubscriberMeta, SubscriberMeta$ } from "./subscribermeta";
import {
    SubscriberResponseAttributes,
    SubscriberResponseAttributes$,
} from "./subscriberresponseattributes";
import {
    SubscriptionSubscriberType,
    SubscriptionSubscriberType$,
} from "./subscriptionsubscribertype";
import { z } from "zod";

export type Subscriber = {
    /**
     * The unique identifier.
     */
    id?: string | undefined;
    type?: SubscriptionSubscriberType | undefined;
    attributes: SubscriberResponseAttributes;
    meta: SubscriberMeta;
};

/** @internal */
export namespace Subscriber$ {
    export type Inbound = {
        id?: string | undefined;
        type?: SubscriptionSubscriberType | undefined;
        attributes: SubscriberResponseAttributes$.Inbound;
        meta: SubscriberMeta$.Inbound;
    };

    export const inboundSchema: z.ZodType<Subscriber, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: SubscriptionSubscriberType$.default(
                SubscriptionSubscriberType.SubscriptionSubscriber
            ),
            attributes: SubscriberResponseAttributes$.inboundSchema,
            meta: SubscriberMeta$.inboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                attributes: v.attributes,
                meta: v.meta,
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type: SubscriptionSubscriberType;
        attributes: SubscriberResponseAttributes$.Outbound;
        meta: SubscriberMeta$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Subscriber> = z
        .object({
            id: z.string().optional(),
            type: SubscriptionSubscriberType$.default(
                SubscriptionSubscriberType.SubscriptionSubscriber
            ),
            attributes: SubscriberResponseAttributes$.outboundSchema,
            meta: SubscriberMeta$.outboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                attributes: v.attributes,
                meta: v.meta,
            };
        });
}
