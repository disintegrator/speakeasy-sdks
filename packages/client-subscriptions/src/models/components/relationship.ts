/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RelationshipData, RelationshipData$ } from "./relationshipdata";
import { RelationshipLinks, RelationshipLinks$ } from "./relationshiplinks";
import { z } from "zod";

/**
 * The subscription resource that is related.
 */
export type Relationship = {
    data?: RelationshipData | undefined;
    /**
     * Links are used to allow you, as an API consumer, to move between requests. Single entities use a self parameter with a link to that specific resource. Sometimes, there arenâ€™t enough entities for a project to fill multiple pages. In this situation, we return some defaults, instead of expecting you to check for these special cases.
     *
     * @remarks
     *
     *  - current - Always the current page.
     *  - first - Always the first page.
     *  - last - always `null`.
     *  - next - `null` if the user is on the first page.
     *  - previous - `null` if there is only one page.
     *
     */
    links?: RelationshipLinks | undefined;
};

/** @internal */
export namespace Relationship$ {
    export type Inbound = {
        data?: RelationshipData$.Inbound | undefined;
        links?: RelationshipLinks$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Relationship, z.ZodTypeDef, Inbound> = z
        .object({
            data: RelationshipData$.inboundSchema.optional(),
            links: RelationshipLinks$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.links === undefined ? null : { links: v.links }),
            };
        });

    export type Outbound = {
        data?: RelationshipData$.Outbound | undefined;
        links?: RelationshipLinks$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Relationship> = z
        .object({
            data: RelationshipData$.outboundSchema.optional(),
            links: RelationshipLinks$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.links === undefined ? null : { links: v.links }),
            };
        });
}
