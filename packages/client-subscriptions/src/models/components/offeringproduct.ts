/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ProductMeta, ProductMeta$ } from "./productmeta";
import { ProductResponseAttributes, ProductResponseAttributes$ } from "./productresponseattributes";
import { Relationship, Relationship$ } from "./relationship";
import {
    SubscriptionOfferingProductType,
    SubscriptionOfferingProductType$,
} from "./subscriptionofferingproducttype";
import { z } from "zod";

export type OfferingProduct = {
    /**
     * The unique identifier.
     */
    id?: string | undefined;
    type?: SubscriptionOfferingProductType | undefined;
    attributes: ProductResponseAttributes;
    /**
     * Relationships are established between different subscription entities. For example, a product and a plan are related to an offering, as both are attached to it.
     */
    relationships?: Record<string, Relationship> | undefined;
    meta: ProductMeta;
};

/** @internal */
export namespace OfferingProduct$ {
    export type Inbound = {
        id?: string | undefined;
        type?: SubscriptionOfferingProductType | undefined;
        attributes: ProductResponseAttributes$.Inbound;
        relationships?: Record<string, Relationship$.Inbound> | undefined;
        meta: ProductMeta$.Inbound;
    };

    export const inboundSchema: z.ZodType<OfferingProduct, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: SubscriptionOfferingProductType$.default(
                SubscriptionOfferingProductType.SubscriptionOfferingProduct
            ),
            attributes: ProductResponseAttributes$.inboundSchema,
            relationships: z.record(Relationship$.inboundSchema).optional(),
            meta: ProductMeta$.inboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                attributes: v.attributes,
                ...(v.relationships === undefined ? null : { relationships: v.relationships }),
                meta: v.meta,
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type: SubscriptionOfferingProductType;
        attributes: ProductResponseAttributes$.Outbound;
        relationships?: Record<string, Relationship$.Outbound> | undefined;
        meta: ProductMeta$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OfferingProduct> = z
        .object({
            id: z.string().optional(),
            type: SubscriptionOfferingProductType$.default(
                SubscriptionOfferingProductType.SubscriptionOfferingProduct
            ),
            attributes: ProductResponseAttributes$.outboundSchema,
            relationships: z.record(Relationship$.outboundSchema).optional(),
            meta: ProductMeta$.outboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                attributes: v.attributes,
                ...(v.relationships === undefined ? null : { relationships: v.relationships }),
                meta: v.meta,
            };
        });
}
