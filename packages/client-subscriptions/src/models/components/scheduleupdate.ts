/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ScheduleUpdateAttributes, ScheduleUpdateAttributes$ } from "./scheduleupdateattributes";
import { SubscriptionScheduleType, SubscriptionScheduleType$ } from "./subscriptionscheduletype";
import { z } from "zod";

export type ScheduleUpdate = {
    /**
     * The unique identifier.
     */
    id: string;
    type?: SubscriptionScheduleType | undefined;
    attributes: ScheduleUpdateAttributes;
};

/** @internal */
export namespace ScheduleUpdate$ {
    export type Inbound = {
        id: string;
        type?: SubscriptionScheduleType | undefined;
        attributes: ScheduleUpdateAttributes$.Inbound;
    };

    export const inboundSchema: z.ZodType<ScheduleUpdate, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            type: SubscriptionScheduleType$.default(SubscriptionScheduleType.SubscriptionSchedule),
            attributes: ScheduleUpdateAttributes$.inboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                type: v.type,
                attributes: v.attributes,
            };
        });

    export type Outbound = {
        id: string;
        type: SubscriptionScheduleType;
        attributes: ScheduleUpdateAttributes$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ScheduleUpdate> = z
        .object({
            id: z.string(),
            type: SubscriptionScheduleType$.default(SubscriptionScheduleType.SubscriptionSchedule),
            attributes: ScheduleUpdateAttributes$.outboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                type: v.type,
                attributes: v.attributes,
            };
        });
}
