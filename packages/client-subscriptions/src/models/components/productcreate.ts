/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ProductAttributes, ProductAttributes$ } from "./productattributes";
import { SubscriptionProductType, SubscriptionProductType$ } from "./subscriptionproducttype";
import { z } from "zod";

export type ProductCreate = {
    type?: SubscriptionProductType | undefined;
    attributes: ProductAttributes;
};

/** @internal */
export namespace ProductCreate$ {
    export type Inbound = {
        type?: SubscriptionProductType | undefined;
        attributes: ProductAttributes$.Inbound;
    };

    export const inboundSchema: z.ZodType<ProductCreate, z.ZodTypeDef, Inbound> = z
        .object({
            type: SubscriptionProductType$.default(SubscriptionProductType.SubscriptionProduct),
            attributes: ProductAttributes$.inboundSchema,
        })
        .transform((v) => {
            return {
                type: v.type,
                attributes: v.attributes,
            };
        });

    export type Outbound = {
        type: SubscriptionProductType;
        attributes: ProductAttributes$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ProductCreate> = z
        .object({
            type: SubscriptionProductType$.default(SubscriptionProductType.SubscriptionProduct),
            attributes: ProductAttributes$.outboundSchema,
        })
        .transform((v) => {
            return {
                type: v.type,
                attributes: v.attributes,
            };
        });
}
