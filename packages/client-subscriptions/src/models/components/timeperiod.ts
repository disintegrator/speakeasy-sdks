/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * A period of time between a start and end point.
 */
export type TimePeriod = {
    /**
     * The date and time a billing period started.
     */
    start: Date;
    /**
     * The date and time a billing period ended.
     */
    end: Date;
};

/** @internal */
export namespace TimePeriod$ {
    export type Inbound = {
        start: string;
        end: string;
    };

    export const inboundSchema: z.ZodType<TimePeriod, z.ZodTypeDef, Inbound> = z
        .object({
            start: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            end: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
        })
        .transform((v) => {
            return {
                start: v.start,
                end: v.end,
            };
        });

    export type Outbound = {
        start: string;
        end: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TimePeriod> = z
        .object({
            start: z.date().transform((v) => v.toISOString()),
            end: z.date().transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                start: v.start,
                end: v.end,
            };
        });
}
