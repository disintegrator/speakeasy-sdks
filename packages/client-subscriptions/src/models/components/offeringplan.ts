/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { OfferingPlanMeta, OfferingPlanMeta$ } from "./offeringplanmeta";
import { PlanResponseAttributes, PlanResponseAttributes$ } from "./planresponseattributes";
import { Relationship, Relationship$ } from "./relationship";
import {
    SubscriptionOfferingPlanType,
    SubscriptionOfferingPlanType$,
} from "./subscriptionofferingplantype";
import { z } from "zod";

export type OfferingPlan = {
    /**
     * The unique identifier.
     */
    id?: string | undefined;
    type?: SubscriptionOfferingPlanType | undefined;
    attributes: PlanResponseAttributes;
    /**
     * Relationships are established between different subscription entities. For example, a product and a plan are related to an offering, as both are attached to it.
     */
    relationships?: Record<string, Relationship> | undefined;
    meta: OfferingPlanMeta;
};

/** @internal */
export namespace OfferingPlan$ {
    export type Inbound = {
        id?: string | undefined;
        type?: SubscriptionOfferingPlanType | undefined;
        attributes: PlanResponseAttributes$.Inbound;
        relationships?: Record<string, Relationship$.Inbound> | undefined;
        meta: OfferingPlanMeta$.Inbound;
    };

    export const inboundSchema: z.ZodType<OfferingPlan, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: SubscriptionOfferingPlanType$.default(
                SubscriptionOfferingPlanType.SubscriptionOfferingPlan
            ),
            attributes: PlanResponseAttributes$.inboundSchema,
            relationships: z.record(Relationship$.inboundSchema).optional(),
            meta: OfferingPlanMeta$.inboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                attributes: v.attributes,
                ...(v.relationships === undefined ? null : { relationships: v.relationships }),
                meta: v.meta,
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type: SubscriptionOfferingPlanType;
        attributes: PlanResponseAttributes$.Outbound;
        relationships?: Record<string, Relationship$.Outbound> | undefined;
        meta: OfferingPlanMeta$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OfferingPlan> = z
        .object({
            id: z.string().optional(),
            type: SubscriptionOfferingPlanType$.default(
                SubscriptionOfferingPlanType.SubscriptionOfferingPlan
            ),
            attributes: PlanResponseAttributes$.outboundSchema,
            relationships: z.record(Relationship$.outboundSchema).optional(),
            meta: OfferingPlanMeta$.outboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                attributes: v.attributes,
                ...(v.relationships === undefined ? null : { relationships: v.relationships }),
                meta: v.meta,
            };
        });
}
