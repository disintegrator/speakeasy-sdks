/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PaymentAuthority, PaymentAuthority$ } from "./paymentauthority";
import { z } from "zod";

export type BuildSubscription = {
    /**
     * A unique attribute that you could use to contain information from another company system, for example. The maximum length is 2048 characters.
     */
    externalRef?: string | undefined;
    /**
     * The unique identifier.
     */
    accountId: string;
    /**
     * The unique identifier.
     */
    offeringId: string;
    /**
     * The unique identifier.
     */
    planId: string;
    /**
     * A currency identifier, usually an ISO 4217 code.
     */
    currency: string;
    paymentAuthority?: PaymentAuthority | undefined;
    name: string;
    email: string;
};

/** @internal */
export namespace BuildSubscription$ {
    export type Inbound = {
        external_ref?: string | undefined;
        account_id: string;
        offering_id: string;
        plan_id: string;
        currency: string;
        payment_authority?: PaymentAuthority$.Inbound | undefined;
        name: string;
        email: string;
    };

    export const inboundSchema: z.ZodType<BuildSubscription, z.ZodTypeDef, Inbound> = z
        .object({
            external_ref: z.string().optional(),
            account_id: z.string(),
            offering_id: z.string(),
            plan_id: z.string(),
            currency: z.string(),
            payment_authority: PaymentAuthority$.inboundSchema.optional(),
            name: z.string(),
            email: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.external_ref === undefined ? null : { externalRef: v.external_ref }),
                accountId: v.account_id,
                offeringId: v.offering_id,
                planId: v.plan_id,
                currency: v.currency,
                ...(v.payment_authority === undefined
                    ? null
                    : { paymentAuthority: v.payment_authority }),
                name: v.name,
                email: v.email,
            };
        });

    export type Outbound = {
        external_ref?: string | undefined;
        account_id: string;
        offering_id: string;
        plan_id: string;
        currency: string;
        payment_authority?: PaymentAuthority$.Outbound | undefined;
        name: string;
        email: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BuildSubscription> = z
        .object({
            externalRef: z.string().optional(),
            accountId: z.string(),
            offeringId: z.string(),
            planId: z.string(),
            currency: z.string(),
            paymentAuthority: PaymentAuthority$.outboundSchema.optional(),
            name: z.string(),
            email: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.externalRef === undefined ? null : { external_ref: v.externalRef }),
                account_id: v.accountId,
                offering_id: v.offeringId,
                plan_id: v.planId,
                currency: v.currency,
                ...(v.paymentAuthority === undefined
                    ? null
                    : { payment_authority: v.paymentAuthority }),
                name: v.name,
                email: v.email,
            };
        });
}
