/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PlanMeta, PlanMeta$ } from "./planmeta";
import { PlanResponseAttributes, PlanResponseAttributes$ } from "./planresponseattributes";
import { SubscriptionPlanType, SubscriptionPlanType$ } from "./subscriptionplantype";
import { z } from "zod";

export type Plan = {
    /**
     * The unique identifier.
     */
    id?: string | undefined;
    type?: SubscriptionPlanType | undefined;
    attributes: PlanResponseAttributes;
    meta: PlanMeta;
};

/** @internal */
export namespace Plan$ {
    export type Inbound = {
        id?: string | undefined;
        type?: SubscriptionPlanType | undefined;
        attributes: PlanResponseAttributes$.Inbound;
        meta: PlanMeta$.Inbound;
    };

    export const inboundSchema: z.ZodType<Plan, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: SubscriptionPlanType$.default(SubscriptionPlanType.SubscriptionPlan),
            attributes: PlanResponseAttributes$.inboundSchema,
            meta: PlanMeta$.inboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                attributes: v.attributes,
                meta: v.meta,
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type: SubscriptionPlanType;
        attributes: PlanResponseAttributes$.Outbound;
        meta: PlanMeta$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Plan> = z
        .object({
            id: z.string().optional(),
            type: SubscriptionPlanType$.default(SubscriptionPlanType.SubscriptionPlan),
            attributes: PlanResponseAttributes$.outboundSchema,
            meta: PlanMeta$.outboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                attributes: v.attributes,
                meta: v.meta,
            };
        });
}
