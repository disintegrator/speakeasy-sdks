/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SubscriberAttributes, SubscriberAttributes$ } from "./subscriberattributes";
import {
    SubscriptionSubscriberType,
    SubscriptionSubscriberType$,
} from "./subscriptionsubscribertype";
import { z } from "zod";

export type SubscriberCreate = {
    type?: SubscriptionSubscriberType | undefined;
    attributes: SubscriberAttributes;
};

/** @internal */
export namespace SubscriberCreate$ {
    export type Inbound = {
        type?: SubscriptionSubscriberType | undefined;
        attributes: SubscriberAttributes$.Inbound;
    };

    export const inboundSchema: z.ZodType<SubscriberCreate, z.ZodTypeDef, Inbound> = z
        .object({
            type: SubscriptionSubscriberType$.default(
                SubscriptionSubscriberType.SubscriptionSubscriber
            ),
            attributes: SubscriberAttributes$.inboundSchema,
        })
        .transform((v) => {
            return {
                type: v.type,
                attributes: v.attributes,
            };
        });

    export type Outbound = {
        type: SubscriptionSubscriberType;
        attributes: SubscriberAttributes$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SubscriberCreate> = z
        .object({
            type: SubscriptionSubscriberType$.default(
                SubscriptionSubscriberType.SubscriptionSubscriber
            ),
            attributes: SubscriberAttributes$.outboundSchema,
        })
        .transform((v) => {
            return {
                type: v.type,
                attributes: v.attributes,
            };
        });
}
