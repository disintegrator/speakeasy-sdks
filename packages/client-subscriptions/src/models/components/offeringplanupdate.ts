/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PlanUpdateAttributes, PlanUpdateAttributes$ } from "./planupdateattributes";
import {
    SubscriptionOfferingPlanType,
    SubscriptionOfferingPlanType$,
} from "./subscriptionofferingplantype";
import { z } from "zod";

export type OfferingPlanUpdate = {
    /**
     * The unique identifier.
     */
    id: string;
    type?: SubscriptionOfferingPlanType | undefined;
    attributes: PlanUpdateAttributes;
};

/** @internal */
export namespace OfferingPlanUpdate$ {
    export type Inbound = {
        id: string;
        type?: SubscriptionOfferingPlanType | undefined;
        attributes: PlanUpdateAttributes$.Inbound;
    };

    export const inboundSchema: z.ZodType<OfferingPlanUpdate, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            type: SubscriptionOfferingPlanType$.default(
                SubscriptionOfferingPlanType.SubscriptionOfferingPlan
            ),
            attributes: PlanUpdateAttributes$.inboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                type: v.type,
                attributes: v.attributes,
            };
        });

    export type Outbound = {
        id: string;
        type: SubscriptionOfferingPlanType;
        attributes: PlanUpdateAttributes$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OfferingPlanUpdate> = z
        .object({
            id: z.string(),
            type: SubscriptionOfferingPlanType$.default(
                SubscriptionOfferingPlanType.SubscriptionOfferingPlan
            ),
            attributes: PlanUpdateAttributes$.outboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                type: v.type,
                attributes: v.attributes,
            };
        });
}
