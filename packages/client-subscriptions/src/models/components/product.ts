/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ProductMeta, ProductMeta$ } from "./productmeta";
import { ProductResponseAttributes, ProductResponseAttributes$ } from "./productresponseattributes";
import { SubscriptionProductType, SubscriptionProductType$ } from "./subscriptionproducttype";
import { z } from "zod";

export type Product = {
    /**
     * The unique identifier.
     */
    id?: string | undefined;
    type?: SubscriptionProductType | undefined;
    attributes: ProductResponseAttributes;
    meta: ProductMeta;
};

/** @internal */
export namespace Product$ {
    export type Inbound = {
        id?: string | undefined;
        type?: SubscriptionProductType | undefined;
        attributes: ProductResponseAttributes$.Inbound;
        meta: ProductMeta$.Inbound;
    };

    export const inboundSchema: z.ZodType<Product, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: SubscriptionProductType$.default(SubscriptionProductType.SubscriptionProduct),
            attributes: ProductResponseAttributes$.inboundSchema,
            meta: ProductMeta$.inboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                attributes: v.attributes,
                meta: v.meta,
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type: SubscriptionProductType;
        attributes: ProductResponseAttributes$.Outbound;
        meta: ProductMeta$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Product> = z
        .object({
            id: z.string().optional(),
            type: SubscriptionProductType$.default(SubscriptionProductType.SubscriptionProduct),
            attributes: ProductResponseAttributes$.outboundSchema,
            meta: ProductMeta$.outboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                type: v.type,
                attributes: v.attributes,
                meta: v.meta,
            };
        });
}
