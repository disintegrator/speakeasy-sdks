/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ProductAttributes, ProductAttributes$ } from "./productattributes";
import { z } from "zod";

export type Products = ProductAttributes | string;

export type BuildOffering = {
    /**
     * A unique attribute that you could use to contain information from another company system, for example. The maximum length is 2048 characters.
     */
    externalRef?: string | undefined;
    /**
     * The name of the offering.
     */
    name: string;
    /**
     * The offering description to display to customers.
     */
    description?: string | undefined;
    /**
     * Either IDs of existing products to be attached to the plan or product information to be created directly within the plan
     */
    products: Array<ProductAttributes | string>;
    /**
     * The IDs of the plans to attach to the offering.
     */
    plans: Array<string>;
};

/** @internal */
export namespace Products$ {
    export type Inbound = ProductAttributes$.Inbound | string;

    export type Outbound = ProductAttributes$.Outbound | string;

    export const inboundSchema: z.ZodType<Products, z.ZodTypeDef, Inbound> = z.union([
        ProductAttributes$.inboundSchema,
        z.string(),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Products> = z.union([
        ProductAttributes$.outboundSchema,
        z.string(),
    ]);
}

/** @internal */
export namespace BuildOffering$ {
    export type Inbound = {
        external_ref?: string | undefined;
        name: string;
        description?: string | undefined;
        products: Array<ProductAttributes$.Inbound | string>;
        plans: Array<string>;
    };

    export const inboundSchema: z.ZodType<BuildOffering, z.ZodTypeDef, Inbound> = z
        .object({
            external_ref: z.string().optional(),
            name: z.string(),
            description: z.string().optional(),
            products: z.array(z.union([ProductAttributes$.inboundSchema, z.string()])),
            plans: z.array(z.string()),
        })
        .transform((v) => {
            return {
                ...(v.external_ref === undefined ? null : { externalRef: v.external_ref }),
                name: v.name,
                ...(v.description === undefined ? null : { description: v.description }),
                products: v.products,
                plans: v.plans,
            };
        });

    export type Outbound = {
        external_ref?: string | undefined;
        name: string;
        description?: string | undefined;
        products: Array<ProductAttributes$.Outbound | string>;
        plans: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BuildOffering> = z
        .object({
            externalRef: z.string().optional(),
            name: z.string(),
            description: z.string().optional(),
            products: z.array(z.union([ProductAttributes$.outboundSchema, z.string()])),
            plans: z.array(z.string()),
        })
        .transform((v) => {
            return {
                ...(v.externalRef === undefined ? null : { external_ref: v.externalRef }),
                name: v.name,
                ...(v.description === undefined ? null : { description: v.description }),
                products: v.products,
                plans: v.plans,
            };
        });
}
