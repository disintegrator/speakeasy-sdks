/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { OfferingUpdateAttributes, OfferingUpdateAttributes$ } from "./offeringupdateattributes";
import { SubscriptionOfferingType, SubscriptionOfferingType$ } from "./subscriptionofferingtype";
import { z } from "zod";

export type OfferingUpdate = {
    /**
     * The unique identifier.
     */
    id: string;
    type?: SubscriptionOfferingType | undefined;
    attributes: OfferingUpdateAttributes;
};

/** @internal */
export namespace OfferingUpdate$ {
    export type Inbound = {
        id: string;
        type?: SubscriptionOfferingType | undefined;
        attributes: OfferingUpdateAttributes$.Inbound;
    };

    export const inboundSchema: z.ZodType<OfferingUpdate, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            type: SubscriptionOfferingType$.default(SubscriptionOfferingType.SubscriptionOffering),
            attributes: OfferingUpdateAttributes$.inboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                type: v.type,
                attributes: v.attributes,
            };
        });

    export type Outbound = {
        id: string;
        type: SubscriptionOfferingType;
        attributes: OfferingUpdateAttributes$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OfferingUpdate> = z
        .object({
            id: z.string(),
            type: SubscriptionOfferingType$.default(SubscriptionOfferingType.SubscriptionOffering),
            attributes: OfferingUpdateAttributes$.outboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                type: v.type,
                attributes: v.attributes,
            };
        });
}
