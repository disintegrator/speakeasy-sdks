/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PaymentFailureDetail, PaymentFailureDetail$ } from "./paymentfailuredetail";
import { SingleCurrencyPrice, SingleCurrencyPrice$ } from "./singlecurrencyprice";
import { z } from "zod";

export type SubscriptionInvoicePaymentAttributes = {
    /**
     * Whether the payment was successful.
     */
    success: boolean;
    /**
     * Specifies the payment gateway. You must use `elastic_path_payments_stripe` as the required gateway.
     */
    gateway: string;
    /**
     * An optional external ID that is specific to the gateway used.
     */
    externalPaymentId?: string | undefined;
    /**
     * The reason the payment failed.
     */
    failureDetail?: PaymentFailureDetail | undefined;
    /**
     * A price in a single currency.
     */
    amount: SingleCurrencyPrice;
};

/** @internal */
export namespace SubscriptionInvoicePaymentAttributes$ {
    export type Inbound = {
        success: boolean;
        gateway: string;
        external_payment_id?: string | undefined;
        failure_detail?: PaymentFailureDetail$.Inbound | undefined;
        amount: SingleCurrencyPrice$.Inbound;
    };

    export const inboundSchema: z.ZodType<
        SubscriptionInvoicePaymentAttributes,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            success: z.boolean(),
            gateway: z.string(),
            external_payment_id: z.string().optional(),
            failure_detail: PaymentFailureDetail$.inboundSchema.optional(),
            amount: SingleCurrencyPrice$.inboundSchema,
        })
        .transform((v) => {
            return {
                success: v.success,
                gateway: v.gateway,
                ...(v.external_payment_id === undefined
                    ? null
                    : { externalPaymentId: v.external_payment_id }),
                ...(v.failure_detail === undefined ? null : { failureDetail: v.failure_detail }),
                amount: v.amount,
            };
        });

    export type Outbound = {
        success: boolean;
        gateway: string;
        external_payment_id?: string | undefined;
        failure_detail?: PaymentFailureDetail$.Outbound | undefined;
        amount: SingleCurrencyPrice$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        SubscriptionInvoicePaymentAttributes
    > = z
        .object({
            success: z.boolean(),
            gateway: z.string(),
            externalPaymentId: z.string().optional(),
            failureDetail: PaymentFailureDetail$.outboundSchema.optional(),
            amount: SingleCurrencyPrice$.outboundSchema,
        })
        .transform((v) => {
            return {
                success: v.success,
                gateway: v.gateway,
                ...(v.externalPaymentId === undefined
                    ? null
                    : { external_payment_id: v.externalPaymentId }),
                ...(v.failureDetail === undefined ? null : { failure_detail: v.failureDetail }),
                amount: v.amount,
            };
        });
}
