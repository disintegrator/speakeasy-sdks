/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ProductUpdateAttributes, ProductUpdateAttributes$ } from "./productupdateattributes";
import {
    SubscriptionOfferingProductType,
    SubscriptionOfferingProductType$,
} from "./subscriptionofferingproducttype";
import { z } from "zod";

export type OfferingProductUpdate = {
    /**
     * The unique identifier.
     */
    id: string;
    type?: SubscriptionOfferingProductType | undefined;
    attributes: ProductUpdateAttributes;
};

/** @internal */
export namespace OfferingProductUpdate$ {
    export type Inbound = {
        id: string;
        type?: SubscriptionOfferingProductType | undefined;
        attributes: ProductUpdateAttributes$.Inbound;
    };

    export const inboundSchema: z.ZodType<OfferingProductUpdate, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            type: SubscriptionOfferingProductType$.default(
                SubscriptionOfferingProductType.SubscriptionOfferingProduct
            ),
            attributes: ProductUpdateAttributes$.inboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                type: v.type,
                attributes: v.attributes,
            };
        });

    export type Outbound = {
        id: string;
        type: SubscriptionOfferingProductType;
        attributes: ProductUpdateAttributes$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, OfferingProductUpdate> = z
        .object({
            id: z.string(),
            type: SubscriptionOfferingProductType$.default(
                SubscriptionOfferingProductType.SubscriptionOfferingProduct
            ),
            attributes: ProductUpdateAttributes$.outboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                type: v.type,
                attributes: v.attributes,
            };
        });
}
