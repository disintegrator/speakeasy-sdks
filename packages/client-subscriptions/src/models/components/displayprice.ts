/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { PriceFormatting, PriceFormatting$ } from "./priceformatting";
import { z } from "zod";

export type DisplayPrice = {
    withoutTax?: PriceFormatting | undefined;
    withTax?: PriceFormatting | undefined;
};

/** @internal */
export namespace DisplayPrice$ {
    export type Inbound = {
        without_tax?: PriceFormatting$.Inbound | undefined;
        with_tax?: PriceFormatting$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<DisplayPrice, z.ZodTypeDef, Inbound> = z
        .object({
            without_tax: PriceFormatting$.inboundSchema.optional(),
            with_tax: PriceFormatting$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.without_tax === undefined ? null : { withoutTax: v.without_tax }),
                ...(v.with_tax === undefined ? null : { withTax: v.with_tax }),
            };
        });

    export type Outbound = {
        without_tax?: PriceFormatting$.Outbound | undefined;
        with_tax?: PriceFormatting$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DisplayPrice> = z
        .object({
            withoutTax: PriceFormatting$.outboundSchema.optional(),
            withTax: PriceFormatting$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.withoutTax === undefined ? null : { without_tax: v.withoutTax }),
                ...(v.withTax === undefined ? null : { with_tax: v.withTax }),
            };
        });
}
