/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Additional supporting meta data for the error.
 */
export type Meta = {};

export type ErrorT = {
    /**
     * The HTTP response code of the error.
     */
    status: string;
    /**
     * A brief summary of the error.
     */
    title: string;
    /**
     * Optional additional detail about the error.
     */
    detail?: string | undefined;
    /**
     * Additional supporting meta data for the error.
     */
    meta?: Meta | undefined;
};

/** @internal */
export namespace Meta$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Meta, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Meta> = z.object({});
}

/** @internal */
export namespace ErrorT$ {
    export type Inbound = {
        status: string;
        title: string;
        detail?: string | undefined;
        meta?: Meta$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string(),
            title: z.string(),
            detail: z.string().optional(),
            meta: z.lazy(() => Meta$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                status: v.status,
                title: v.title,
                ...(v.detail === undefined ? null : { detail: v.detail }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });

    export type Outbound = {
        status: string;
        title: string;
        detail?: string | undefined;
        meta?: Meta$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrorT> = z
        .object({
            status: z.string(),
            title: z.string(),
            detail: z.string().optional(),
            meta: z.lazy(() => Meta$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                status: v.status,
                title: v.title,
                ...(v.detail === undefined ? null : { detail: v.detail }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });
}
