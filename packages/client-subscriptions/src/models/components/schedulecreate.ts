/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ScheduleAttributes, ScheduleAttributes$ } from "./scheduleattributes";
import { SubscriptionScheduleType, SubscriptionScheduleType$ } from "./subscriptionscheduletype";
import { z } from "zod";

export type ScheduleCreate = {
    type?: SubscriptionScheduleType | undefined;
    attributes: ScheduleAttributes;
};

/** @internal */
export namespace ScheduleCreate$ {
    export type Inbound = {
        type?: SubscriptionScheduleType | undefined;
        attributes: ScheduleAttributes$.Inbound;
    };

    export const inboundSchema: z.ZodType<ScheduleCreate, z.ZodTypeDef, Inbound> = z
        .object({
            type: SubscriptionScheduleType$.default(SubscriptionScheduleType.SubscriptionSchedule),
            attributes: ScheduleAttributes$.inboundSchema,
        })
        .transform((v) => {
            return {
                type: v.type,
                attributes: v.attributes,
            };
        });

    export type Outbound = {
        type: SubscriptionScheduleType;
        attributes: ScheduleAttributes$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ScheduleCreate> = z
        .object({
            type: SubscriptionScheduleType$.default(SubscriptionScheduleType.SubscriptionSchedule),
            attributes: ScheduleAttributes$.outboundSchema,
        })
        .transform((v) => {
            return {
                type: v.type,
                attributes: v.attributes,
            };
        });
}
