/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum Type {
    ElasticPathPaymentsStripe = "elastic_path_payments_stripe",
}

export type PaymentAuthorityEpPayments = {
    type: Type;
    customerId: string;
    cardId: string;
};

/** @internal */
export const Type$ = z.nativeEnum(Type);

/** @internal */
export namespace PaymentAuthorityEpPayments$ {
    export type Inbound = {
        type: Type;
        customer_id: string;
        card_id: string;
    };

    export const inboundSchema: z.ZodType<PaymentAuthorityEpPayments, z.ZodTypeDef, Inbound> = z
        .object({
            type: Type$,
            customer_id: z.string(),
            card_id: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                customerId: v.customer_id,
                cardId: v.card_id,
            };
        });

    export type Outbound = {
        type: Type;
        customer_id: string;
        card_id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PaymentAuthorityEpPayments> = z
        .object({
            type: Type$,
            customerId: z.string(),
            cardId: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                customer_id: v.customerId,
                card_id: v.cardId,
            };
        });
}
