/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type GetSubscriptionInvoicePaymentRequest = {
    /**
     * The unique identifier of the subscription.
     */
    subscriptionUuid: string;
    /**
     * The unique identifier of the invoice.
     */
    invoiceUuid: string;
    /**
     * The unique identifier of the payment.
     */
    paymentUuid: string;
};

/**
 * Success. Specific payment for the invoice is returned
 */
export type GetSubscriptionInvoicePaymentResponseBody = {
    data?: components.SubscriptionInvoicePayment | undefined;
};

export type GetSubscriptionInvoicePaymentResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success. Specific payment for the invoice is returned
     */
    object?: GetSubscriptionInvoicePaymentResponseBody | undefined;
};

/** @internal */
export namespace GetSubscriptionInvoicePaymentRequest$ {
    export type Inbound = {
        subscription_uuid: string;
        invoice_uuid: string;
        payment_uuid: string;
    };

    export const inboundSchema: z.ZodType<
        GetSubscriptionInvoicePaymentRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            subscription_uuid: z.string(),
            invoice_uuid: z.string(),
            payment_uuid: z.string(),
        })
        .transform((v) => {
            return {
                subscriptionUuid: v.subscription_uuid,
                invoiceUuid: v.invoice_uuid,
                paymentUuid: v.payment_uuid,
            };
        });

    export type Outbound = {
        subscription_uuid: string;
        invoice_uuid: string;
        payment_uuid: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetSubscriptionInvoicePaymentRequest
    > = z
        .object({
            subscriptionUuid: z.string(),
            invoiceUuid: z.string(),
            paymentUuid: z.string(),
        })
        .transform((v) => {
            return {
                subscription_uuid: v.subscriptionUuid,
                invoice_uuid: v.invoiceUuid,
                payment_uuid: v.paymentUuid,
            };
        });
}

/** @internal */
export namespace GetSubscriptionInvoicePaymentResponseBody$ {
    export type Inbound = {
        data?: components.SubscriptionInvoicePayment$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetSubscriptionInvoicePaymentResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            data: components.SubscriptionInvoicePayment$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });

    export type Outbound = {
        data?: components.SubscriptionInvoicePayment$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetSubscriptionInvoicePaymentResponseBody
    > = z
        .object({
            data: components.SubscriptionInvoicePayment$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });
}

/** @internal */
export namespace GetSubscriptionInvoicePaymentResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetSubscriptionInvoicePaymentResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetSubscriptionInvoicePaymentResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z
                .lazy(() => GetSubscriptionInvoicePaymentResponseBody$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetSubscriptionInvoicePaymentResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetSubscriptionInvoicePaymentResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z
                .lazy(() => GetSubscriptionInvoicePaymentResponseBody$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
