/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type ListSubscriptionsRequest = {
    filter?: string | undefined;
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](https://elasticpath.dev/docs/commerce-cloud/global-project-settings/settings-overview#page-length) store setting is used.
     */
    pageOffset?: number | undefined;
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](https://elasticpath.dev/docs/commerce-cloud/global-project-settings/settings-overview#page-length) store setting is used.
     */
    pageLimit?: number | undefined;
};

/**
 * Success. A list of subscriptions is returned.
 */
export type ListSubscriptionsResponseBody = {
    data?: Array<components.Subscription> | undefined;
    links?: Record<string, components.Link> | undefined;
};

export type ListSubscriptionsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success. A list of subscriptions is returned.
     */
    object?: ListSubscriptionsResponseBody | undefined;
};

/** @internal */
export namespace ListSubscriptionsRequest$ {
    export type Inbound = {
        filter?: string | undefined;
        "page[offset]"?: number | undefined;
        "page[limit]"?: number | undefined;
    };

    export const inboundSchema: z.ZodType<ListSubscriptionsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            filter: z.string().optional(),
            "page[offset]": z.number().int().optional(),
            "page[limit]": z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.filter === undefined ? null : { filter: v.filter }),
                ...(v["page[offset]"] === undefined ? null : { pageOffset: v["page[offset]"] }),
                ...(v["page[limit]"] === undefined ? null : { pageLimit: v["page[limit]"] }),
            };
        });

    export type Outbound = {
        filter?: string | undefined;
        "page[offset]"?: number | undefined;
        "page[limit]"?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListSubscriptionsRequest> = z
        .object({
            filter: z.string().optional(),
            pageOffset: z.number().int().optional(),
            pageLimit: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.filter === undefined ? null : { filter: v.filter }),
                ...(v.pageOffset === undefined ? null : { "page[offset]": v.pageOffset }),
                ...(v.pageLimit === undefined ? null : { "page[limit]": v.pageLimit }),
            };
        });
}

/** @internal */
export namespace ListSubscriptionsResponseBody$ {
    export type Inbound = {
        data?: Array<components.Subscription$.Inbound> | undefined;
        links?: Record<string, components.Link$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ListSubscriptionsResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.array(components.Subscription$.inboundSchema).optional(),
            links: z.record(components.Link$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.links === undefined ? null : { links: v.links }),
            };
        });

    export type Outbound = {
        data?: Array<components.Subscription$.Outbound> | undefined;
        links?: Record<string, components.Link$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListSubscriptionsResponseBody> =
        z
            .object({
                data: z.array(components.Subscription$.outboundSchema).optional(),
                links: z.record(components.Link$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.data === undefined ? null : { data: v.data }),
                    ...(v.links === undefined ? null : { links: v.links }),
                };
            });
}

/** @internal */
export namespace ListSubscriptionsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: ListSubscriptionsResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListSubscriptionsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => ListSubscriptionsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: ListSubscriptionsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListSubscriptionsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => ListSubscriptionsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
