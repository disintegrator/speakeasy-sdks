/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type UpdateOfferingProductRequestBody = {
    data: components.OfferingProductUpdate;
};

export type UpdateOfferingProductRequest = {
    /**
     * The unique identifier of the offering.
     */
    offeringUuid: string;
    /**
     * The unique identifier of the product.
     */
    productUuid: string;
    requestBody?: UpdateOfferingProductRequestBody | undefined;
};

/**
 * Success. The product details are updated on the offering.
 */
export type UpdateOfferingProductResponseBody = {
    data?: components.Product | undefined;
};

export type UpdateOfferingProductResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success. The product details are updated on the offering.
     */
    object?: UpdateOfferingProductResponseBody | undefined;
};

/** @internal */
export namespace UpdateOfferingProductRequestBody$ {
    export type Inbound = {
        data: components.OfferingProductUpdate$.Inbound;
    };

    export const inboundSchema: z.ZodType<UpdateOfferingProductRequestBody, z.ZodTypeDef, Inbound> =
        z
            .object({
                data: components.OfferingProductUpdate$.inboundSchema,
            })
            .transform((v) => {
                return {
                    data: v.data,
                };
            });

    export type Outbound = {
        data: components.OfferingProductUpdate$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateOfferingProductRequestBody
    > = z
        .object({
            data: components.OfferingProductUpdate$.outboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace UpdateOfferingProductRequest$ {
    export type Inbound = {
        offering_uuid: string;
        product_uuid: string;
        RequestBody?: UpdateOfferingProductRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateOfferingProductRequest, z.ZodTypeDef, Inbound> = z
        .object({
            offering_uuid: z.string(),
            product_uuid: z.string(),
            RequestBody: z.lazy(() => UpdateOfferingProductRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                offeringUuid: v.offering_uuid,
                productUuid: v.product_uuid,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        offering_uuid: string;
        product_uuid: string;
        RequestBody?: UpdateOfferingProductRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateOfferingProductRequest> = z
        .object({
            offeringUuid: z.string(),
            productUuid: z.string(),
            requestBody: z.lazy(() => UpdateOfferingProductRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                offering_uuid: v.offeringUuid,
                product_uuid: v.productUuid,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace UpdateOfferingProductResponseBody$ {
    export type Inbound = {
        data?: components.Product$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        UpdateOfferingProductResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            data: components.Product$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });

    export type Outbound = {
        data?: components.Product$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        UpdateOfferingProductResponseBody
    > = z
        .object({
            data: components.Product$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });
}

/** @internal */
export namespace UpdateOfferingProductResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: UpdateOfferingProductResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateOfferingProductResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => UpdateOfferingProductResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: UpdateOfferingProductResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateOfferingProductResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                object: z.lazy(() => UpdateOfferingProductResponseBody$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.object === undefined ? null : { object: v.object }),
                };
            });
}
