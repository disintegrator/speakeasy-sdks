/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type UpdateOfferingPlanRequestBody = {
    data: components.OfferingPlanUpdate;
};

export type UpdateOfferingPlanRequest = {
    /**
     * The unique identifier of the offering.
     */
    offeringUuid: string;
    /**
     * The unique identifier of the plan.
     */
    planUuid: string;
    requestBody?: UpdateOfferingPlanRequestBody | undefined;
};

/**
 * Success. The plan details are updated on the offering.
 */
export type UpdateOfferingPlanResponseBody = {
    data?: components.OfferingPlan | undefined;
};

export type UpdateOfferingPlanResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success. The plan details are updated on the offering.
     */
    object?: UpdateOfferingPlanResponseBody | undefined;
};

/** @internal */
export namespace UpdateOfferingPlanRequestBody$ {
    export type Inbound = {
        data: components.OfferingPlanUpdate$.Inbound;
    };

    export const inboundSchema: z.ZodType<UpdateOfferingPlanRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: components.OfferingPlanUpdate$.inboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: components.OfferingPlanUpdate$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateOfferingPlanRequestBody> =
        z
            .object({
                data: components.OfferingPlanUpdate$.outboundSchema,
            })
            .transform((v) => {
                return {
                    data: v.data,
                };
            });
}

/** @internal */
export namespace UpdateOfferingPlanRequest$ {
    export type Inbound = {
        offering_uuid: string;
        plan_uuid: string;
        RequestBody?: UpdateOfferingPlanRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateOfferingPlanRequest, z.ZodTypeDef, Inbound> = z
        .object({
            offering_uuid: z.string(),
            plan_uuid: z.string(),
            RequestBody: z.lazy(() => UpdateOfferingPlanRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                offeringUuid: v.offering_uuid,
                planUuid: v.plan_uuid,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        offering_uuid: string;
        plan_uuid: string;
        RequestBody?: UpdateOfferingPlanRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateOfferingPlanRequest> = z
        .object({
            offeringUuid: z.string(),
            planUuid: z.string(),
            requestBody: z.lazy(() => UpdateOfferingPlanRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                offering_uuid: v.offeringUuid,
                plan_uuid: v.planUuid,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace UpdateOfferingPlanResponseBody$ {
    export type Inbound = {
        data?: components.OfferingPlan$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateOfferingPlanResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: components.OfferingPlan$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });

    export type Outbound = {
        data?: components.OfferingPlan$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateOfferingPlanResponseBody> =
        z
            .object({
                data: components.OfferingPlan$.outboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.data === undefined ? null : { data: v.data }),
                };
            });
}

/** @internal */
export namespace UpdateOfferingPlanResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: UpdateOfferingPlanResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdateOfferingPlanResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => UpdateOfferingPlanResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: UpdateOfferingPlanResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateOfferingPlanResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => UpdateOfferingPlanResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
