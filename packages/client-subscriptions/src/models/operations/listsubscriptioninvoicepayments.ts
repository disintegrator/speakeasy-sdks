/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type ListSubscriptionInvoicePaymentsRequest = {
    /**
     * The unique identifier of the subscription.
     */
    subscriptionUuid: string;
    /**
     * The unique identifier of the invoice.
     */
    invoiceUuid: string;
};

/**
 * Success. Payments for the invoice are returned
 */
export type ListSubscriptionInvoicePaymentsResponseBody = {
    data?: Array<components.SubscriptionInvoicePayment> | undefined;
};

export type ListSubscriptionInvoicePaymentsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success. Payments for the invoice are returned
     */
    object?: ListSubscriptionInvoicePaymentsResponseBody | undefined;
};

/** @internal */
export namespace ListSubscriptionInvoicePaymentsRequest$ {
    export type Inbound = {
        subscription_uuid: string;
        invoice_uuid: string;
    };

    export const inboundSchema: z.ZodType<
        ListSubscriptionInvoicePaymentsRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            subscription_uuid: z.string(),
            invoice_uuid: z.string(),
        })
        .transform((v) => {
            return {
                subscriptionUuid: v.subscription_uuid,
                invoiceUuid: v.invoice_uuid,
            };
        });

    export type Outbound = {
        subscription_uuid: string;
        invoice_uuid: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ListSubscriptionInvoicePaymentsRequest
    > = z
        .object({
            subscriptionUuid: z.string(),
            invoiceUuid: z.string(),
        })
        .transform((v) => {
            return {
                subscription_uuid: v.subscriptionUuid,
                invoice_uuid: v.invoiceUuid,
            };
        });
}

/** @internal */
export namespace ListSubscriptionInvoicePaymentsResponseBody$ {
    export type Inbound = {
        data?: Array<components.SubscriptionInvoicePayment$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<
        ListSubscriptionInvoicePaymentsResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            data: z.array(components.SubscriptionInvoicePayment$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });

    export type Outbound = {
        data?: Array<components.SubscriptionInvoicePayment$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ListSubscriptionInvoicePaymentsResponseBody
    > = z
        .object({
            data: z.array(components.SubscriptionInvoicePayment$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });
}

/** @internal */
export namespace ListSubscriptionInvoicePaymentsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: ListSubscriptionInvoicePaymentsResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        ListSubscriptionInvoicePaymentsResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z
                .lazy(() => ListSubscriptionInvoicePaymentsResponseBody$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: ListSubscriptionInvoicePaymentsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ListSubscriptionInvoicePaymentsResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z
                .lazy(() => ListSubscriptionInvoicePaymentsResponseBody$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
