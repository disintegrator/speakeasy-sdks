/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type ListSchedulesRequest = {
    filter?: string | undefined;
};

/**
 * Success. A list of schedules is returned.
 */
export type ListSchedulesResponseBody = {
    data?: Array<components.Schedule> | undefined;
};

export type ListSchedulesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success. A list of schedules is returned.
     */
    object?: ListSchedulesResponseBody | undefined;
};

/** @internal */
export namespace ListSchedulesRequest$ {
    export type Inbound = {
        filter?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ListSchedulesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            filter: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.filter === undefined ? null : { filter: v.filter }),
            };
        });

    export type Outbound = {
        filter?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListSchedulesRequest> = z
        .object({
            filter: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.filter === undefined ? null : { filter: v.filter }),
            };
        });
}

/** @internal */
export namespace ListSchedulesResponseBody$ {
    export type Inbound = {
        data?: Array<components.Schedule$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<ListSchedulesResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.array(components.Schedule$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });

    export type Outbound = {
        data?: Array<components.Schedule$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListSchedulesResponseBody> = z
        .object({
            data: z.array(components.Schedule$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });
}

/** @internal */
export namespace ListSchedulesResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: ListSchedulesResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ListSchedulesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => ListSchedulesResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: ListSchedulesResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ListSchedulesResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => ListSchedulesResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
