/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type GetSubscriberRequest = {
    /**
     * The unique identifier of the subscriber.
     */
    subscriberUuid: string;
};

/**
 * Success. A subscriber is returned.
 */
export type GetSubscriberResponseBody = {
    data?: components.Subscriber | undefined;
};

export type GetSubscriberResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success. A subscriber is returned.
     */
    object?: GetSubscriberResponseBody | undefined;
};

/** @internal */
export namespace GetSubscriberRequest$ {
    export type Inbound = {
        subscriber_uuid: string;
    };

    export const inboundSchema: z.ZodType<GetSubscriberRequest, z.ZodTypeDef, Inbound> = z
        .object({
            subscriber_uuid: z.string(),
        })
        .transform((v) => {
            return {
                subscriberUuid: v.subscriber_uuid,
            };
        });

    export type Outbound = {
        subscriber_uuid: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSubscriberRequest> = z
        .object({
            subscriberUuid: z.string(),
        })
        .transform((v) => {
            return {
                subscriber_uuid: v.subscriberUuid,
            };
        });
}

/** @internal */
export namespace GetSubscriberResponseBody$ {
    export type Inbound = {
        data?: components.Subscriber$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetSubscriberResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: components.Subscriber$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });

    export type Outbound = {
        data?: components.Subscriber$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSubscriberResponseBody> = z
        .object({
            data: components.Subscriber$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });
}

/** @internal */
export namespace GetSubscriberResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetSubscriberResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetSubscriberResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetSubscriberResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetSubscriberResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetSubscriberResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetSubscriberResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
