/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type UpdatePlanRequestBody = {
    data: components.PlanUpdate;
};

export type UpdatePlanRequest = {
    /**
     * The unique identifier of the plan.
     */
    planUuid: string;
    requestBody?: UpdatePlanRequestBody | undefined;
};

/**
 * Success. The details of the plan are updated.
 */
export type UpdatePlanResponseBody = {
    data?: components.Plan | undefined;
};

export type UpdatePlanResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success. The details of the plan are updated.
     */
    object?: UpdatePlanResponseBody | undefined;
};

/** @internal */
export namespace UpdatePlanRequestBody$ {
    export type Inbound = {
        data: components.PlanUpdate$.Inbound;
    };

    export const inboundSchema: z.ZodType<UpdatePlanRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: components.PlanUpdate$.inboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });

    export type Outbound = {
        data: components.PlanUpdate$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdatePlanRequestBody> = z
        .object({
            data: components.PlanUpdate$.outboundSchema,
        })
        .transform((v) => {
            return {
                data: v.data,
            };
        });
}

/** @internal */
export namespace UpdatePlanRequest$ {
    export type Inbound = {
        plan_uuid: string;
        RequestBody?: UpdatePlanRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdatePlanRequest, z.ZodTypeDef, Inbound> = z
        .object({
            plan_uuid: z.string(),
            RequestBody: z.lazy(() => UpdatePlanRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                planUuid: v.plan_uuid,
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        plan_uuid: string;
        RequestBody?: UpdatePlanRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdatePlanRequest> = z
        .object({
            planUuid: z.string(),
            requestBody: z.lazy(() => UpdatePlanRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                plan_uuid: v.planUuid,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export namespace UpdatePlanResponseBody$ {
    export type Inbound = {
        data?: components.Plan$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdatePlanResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: components.Plan$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });

    export type Outbound = {
        data?: components.Plan$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdatePlanResponseBody> = z
        .object({
            data: components.Plan$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });
}

/** @internal */
export namespace UpdatePlanResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: UpdatePlanResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UpdatePlanResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => UpdatePlanResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: UpdatePlanResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdatePlanResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => UpdatePlanResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
